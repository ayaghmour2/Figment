## This program is used to create queries based on statistics pulled from the in game CSV files. The beginning part
## will be used to explain the code. Below all the text will be the actual code to run. You are first using a
## database I created to then create queries so you can filter through the draft pool quicker and easier then while 
## in game and without having to open the game up. The last column is Scout Accuracy. You will want to edit the CSV
## file to change the last category to your Scouts values. You can pull up the Draft Class in game and then export
## any view that has your scout accuracy listed. You can then replace the default scout accuracy with your scouts.
## You can add categories in SQL lite (defintely check out their tutorial if you are having issues) so you can write
## in scouting reports. For example, if you want to remeber that on April 12th, 1935 your scout said that Rufus
## Barrell has front of the rotation potential, you can add that as a note. Then you can use those notes as a 
## category that appears with the queues. It is not perfect, but hope it will help you guys out a bit!

## To begin, you will need to download and then call sqlite. To download: 
## https://stackoverflow.com/questions/29042954/sqlite-path-environment-variable-db-browser-sqlite

## To call:

sqlite3

## Creating the database. Make sure to change the directory to your personal directory:

.open --new "D:/Documents/GitHub/Figment/Database/1934 Draft.db"

.mode column
.headers on

## Some categories have weird names: Batter GS are GS (Bat); Batter BB are Walks; Pitcher BABIP is BABIP (Opponent);
## Pitcher WAR is pWAR. Also, the `` symbol (you only need one) is needed around words that are either a function
## name (like there is a function called number), have a space (see city of Birth), or a number.

CREATE TABLE Players
(
  ID Integer ,
  Position Text ,
  'Number' Text ,
  'Name' Text ,
  Nickname Text ,
  Inf Text ,
  Age Integer ,
  `City of Birth` Text ,
  Height Text ,
  `Weight` Integer ,
  Bats Text ,
  Throws Text ,
  School Text ,
  `Commit` Text ,
  Competition Text ,
  `Level` Text ,
  Pitches Integer ,
  Tendency Text ,
  Velocity Text ,
  Slot Text ,
  `Pitch Type` Text ,
  G Integer ,
  `GS (Bat)` Integer ,
  PA Integer ,
  AB Integer ,
  H Integer ,
  `2B` Integer ,
  `3B` Integer ,
  HR Integer ,
  RBI Integer ,
  R Integer ,
  Walks Integer ,
  SO Integer ,
  AVG Integer ,
  OBP Integer ,
  SLG Integer ,
  RC Integer ,
  `RC27` Integer ,
  ISO Integer ,
  wOBA Integer ,
  OPS Integer ,
  `OPS+` Integer ,
  BABIP Integer ,
  WPA Integer ,
  wRC Integer ,
  `WRC+` Integer ,
  wRAA Integer ,
  WAR Integer ,
  SB Integer ,
  CS Integer ,
  BsR Integer ,
  GP Integer ,
  GS Integer ,
  W Integer ,
  L Integer ,
  SV Integer ,
  BS Integer ,
  HLD Integer ,
  IP Integer ,
  HRA Integer ,
  RA Integer ,
  ER Integer ,
  BB Integer ,
  K Integer ,
  ERA Integer ,
  `BABIP (Opponent)` Integer ,
  WHIP Integer ,
  `RA9` Integer ,
  `HR9` Integer ,
  `BB9` Integer ,
  `K9` Integer ,
  KBB Integer ,
  QS Integer ,
  CG Integer ,
  `GO%` Integer ,
  `ERA+` Integer ,
  FIP Integer ,
  `FIP-` Integer ,
  pWAR Integer ,
  rWAR Integer ,
  Accuracy Text ,
  Primary Key (`Name`)
)

;

.import --csv "D:/Documents/GitHub/Figment/Data/Draft Classes/1934.csv" Players

## Here is how to build queries:

SELECT `Name`, ERA
FROM Players
WHERE ERA < 3.00
AND IP > 20
;

## This query shows all players with an ERA below 3.00. The second part is to make sure that no players with very few innings
## flood the query. If you take that part out, a lot of batters show up to.

SELECT `Name`, ERA
FROM Players
WHERE ERA < 3.00
AND IP > 20
Order By ERA
;

## As you can see, the Order By function sorts by ERA. This is ascending, while a - in front of ERA would reverse.

SELECT `Name`, ERA, Position
FROM Players
WHERE ERA < 3.00
AND IP > 20
Order By ERA
;

## The more columns you want to get generate, the more you can add. Seperate each with a comma.

SELECT `Name`, ERA, Position
FROM Players
WHERE ERA < 3.00
AND IP > 20
Order By ERA
;

## You can search for more then just numbers, as a variety of text commands can be used too.

SELECT Position, `Name`, Age, `Level`
FROM Players
WHERE `City of Birth` LIKE "%Chicago%"
Order By `Name`
;

## Check out all the Chicago kids! You can use the "% %" and the LIKE function to find all entries with text like
## what is in the quotations.

SELECT `Name`, School
SUM(`Name`) as "Draftees"
FROM Players
GROUP BY School
;

## I plan on saving all draft classes (I retroactively was able to get 1934 it is just missing a few metrics) so
## we can look back and compare current classes to past classes. I eventually hope to create another database for
## active players (and potentially all players)