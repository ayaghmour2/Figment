## This program is used to create queries based on statistics pulled from the in game CSV files. The beginning part
## will be used to explain the code. Below all the text will be the actual code to run. You are first using a
## database I created to then create queries so you can filter through the draft pool quicker and easier then while 
## in game and without having to open the game up. The last column is Scout Accuracy. You will want to edit the CSV
## file to change the last category to your Scouts values. You can pull up the Draft Class in game and then export
## any view that has your scout accuracy listed. You can then replace the default scout accuracy with your scouts
## and the last column is so you can type notes on the .csv file about your scouts report or (if your handy with
## SQLite/check out the tutorial) use your IDE/Code Editor to fill the empty cells. It is not perfect, but hope it 
## will help you guys out with the chaotic process that is the draft!

## To begin, you will need to download and then call sqlite. To download: 
## https://stackoverflow.com/questions/29042954/sqlite-path-environment-variable-db-browser-sqlite

## To call:

sqlite3

## To make output look nicer:

.mode column
.headers on

## Creating the database. Make sure to change the directory to your personal directory and load the :

.open --new "D:/Documents/GitHub/Figment/Database/Draft.db"

## When you come back to the database, delete the "--new" portion and you can open your already created database.

## Note: the database is already pre-built on github. Below show how the tables were created in case you want to
## create your own tables. All .csv files have the same format as the table below (except for 1935 class), so if you
## wanted to load up a future class, you can follow the same template by changing the .csv file and location.

## To access the prebuilt database, copy the Draft.db file from github on to your personal device. Then change the
"D:/Documents/" path above to the location on your computer.

## Some categories have weird names: Batter GS are GS (Bat); Batter BB are Walks; Pitcher BABIP is BABIP (Opponent);
## Pitcher WAR is pWAR. Also, the `` symbol (you only need one) is needed around words that are either a function
## name (like there is a function called number), have a space (see city of Birth), or a number. You will want to 
## import the stats of each season for the pool.

CREATE TABLE "1934"
(
  ID Integer ,
  Position Text ,
  'Number' Text ,
  'Name' Text ,
  Nickname Text ,
  Age Integer ,
  Nationality Text ,
  `City of Birth` Text ,
  Height Text ,
  `Weight` Integer ,
  Bats Text ,
  Throws Text ,
  School Text ,
  `Commit` Text ,
  Competition Text ,
  `Level` Text ,
  Pitches Integer ,
  Tendency Text ,
  Velocity Text ,
  Slot Text ,
  `Pitch Type` Text ,
  G Integer ,
  `GS (Bat)` Integer ,
  PA Integer ,
  AB Integer ,
  H Integer ,
  `2B` Integer ,
  `3B` Integer ,
  HR Integer ,
  RBI Integer ,
  R Integer ,
  Walks Integer ,
  SO Integer ,
  EBH Integer ,
  AVG Integer ,
  OBP Integer ,
  SLG Integer ,
  RC Integer ,
  `RC27` Integer ,
  ISO Integer ,
  wOBA Integer ,
  OPS Integer ,
  BABIP Integer ,
  WPA Integer ,
  WAR Integer ,
  PiPA Integer ,
  SB Integer ,
  CS Integer ,
  GP Integer ,
  GS Integer ,
  W Integer ,
  L Integer ,
  SV Integer ,
  BS Integer ,
  HLD Integer ,
  IP Integer ,
  HA Integer ,
  HRA Integer ,
  RA Integer ,
  ER Integer ,
  BB Integer ,
  K Integer ,
  ERA Integer ,
  `BABIP (Opponent)` Integer ,
  WHIP Integer ,
  `RA9` Integer ,
  `HR9` Integer ,
  `H9` Integer ,
  `BB9` Integer ,
  `K9` Integer ,
  KBB Integer ,
  QS Integer ,
  CG Integer ,
  SHO Integer ,
  `GO%` Integer ,
  FIP Integer ,
  `WPA (Pitcher)` Integer ,
  pWAR Integer ,
  rWAR Integer ,
  Demand Integer ,
  `Sign` Text ,
  Accuracy Text ,
  Primary Key (ID)
)
;

## Select the corresponding statistical year:

.import --csv "D:/Documents/GitHub/Figment/Data/Draft Classes/1936/1934.csv" 1934

CREATE TABLE "1935"
(
  ID Integer ,
  Position Text ,
  'Number' Text ,
  'Name' Text ,
  Nickname Text ,
  Age Integer ,
  Nationality Text ,
  `City of Birth` Text ,
  Height Text ,
  `Weight` Integer ,
  Bats Text ,
  Throws Text ,
  School Text ,
  `Commit` Text ,
  Competition Text ,
  `Level` Text ,
  Pitches Integer ,
  Tendency Text ,
  Velocity Text ,
  Slot Text ,
  `Pitch Type` Text ,
  G Integer ,
  `GS (Bat)` Integer ,
  PA Integer ,
  AB Integer ,
  H Integer ,
  `2B` Integer ,
  `3B` Integer ,
  HR Integer ,
  RBI Integer ,
  R Integer ,
  Walks Integer ,
  SO Integer ,
  EBH Integer ,
  AVG Integer ,
  OBP Integer ,
  SLG Integer ,
  RC Integer ,
  `RC27` Integer ,
  ISO Integer ,
  wOBA Integer ,
  OPS Integer ,
  BABIP Integer ,
  WPA Integer ,
  WAR Integer ,
  PiPA Integer ,
  SB Integer ,
  CS Integer ,
  GP Integer ,
  GS Integer ,
  W Integer ,
  L Integer ,
  SV Integer ,
  BS Integer ,
  HLD Integer ,
  IP Integer ,
  HA Integer ,
  HRA Integer ,
  RA Integer ,
  ER Integer ,
  BB Integer ,
  K Integer ,
  ERA Integer ,
  `BABIP (Opponent)` Integer ,
  WHIP Integer ,
  `RA9` Integer ,
  `HR9` Integer ,
  `H9` Integer ,
  `BB9` Integer ,
  `K9` Integer ,
  KBB Integer ,
  QS Integer ,
  CG Integer ,
  SHO Integer ,
  `GO%` Integer ,
  FIP Integer ,
  `WPA (Pitcher)` Integer ,
  pWAR Integer ,
  rWAR Integer ,
  Demand Integer ,
  Sign Text ,
  Accuracy Text ,
  Primary Key (ID)
)
;

## Select the corresponding statistical year:

.import --csv "D:/Documents/GitHub/Figment/Data/Draft Classes/1936/1935.csv" 1935

CREATE TABLE "1936"
(
  ID Integer ,
  Position Text ,
  'Number' Text ,
  'Name' Text ,
  Nickname Text ,
  Age Integer ,
  Nationality Text ,
  `City of Birth` Text ,
  Height Text ,
  `Weight` Integer ,
  Bats Text ,
  Throws Text ,
  School Text ,
  `Commit` Text ,
  Competition Text ,
  `Level` Text ,
  Pitches Integer ,
  Tendency Text ,
  Velocity Text ,
  Slot Text ,
  `Pitch Type` Text ,
  G Integer ,
  `GS (Bat)` Integer ,
  PA Integer ,
  AB Integer ,
  H Integer ,
  `2B` Integer ,
  `3B` Integer ,
  HR Integer ,
  RBI Integer ,
  R Integer ,
  Walks Integer ,
  SO Integer ,
  EBH Integer ,
  AVG Integer ,
  OBP Integer ,
  SLG Integer ,
  RC Integer ,
  `RC27` Integer ,
  ISO Integer ,
  wOBA Integer ,
  OPS Integer ,
  BABIP Integer ,
  WPA Integer ,
  WAR Integer ,
  PiPA Integer ,
  SB Integer ,
  CS Integer ,
  GP Integer ,
  GS Integer ,
  W Integer ,
  L Integer ,
  SV Integer ,
  BS Integer ,
  HLD Integer ,
  IP Integer ,
  HA Integer ,
  HRA Integer ,
  RA Integer ,
  ER Integer ,
  BB Integer ,
  K Integer ,
  ERA Integer ,
  `BABIP (Opponent)` Integer ,
  WHIP Integer ,
  `RA9` Integer ,
  `HR9` Integer ,
  `H9` Integer ,
  `BB9` Integer ,
  `K9` Integer ,
  KBB Integer ,
  QS Integer ,
  CG Integer ,
  SHO Integer ,
  `GO%` Integer ,
  FIP Integer ,
  `WPA (Pitcher)` Integer ,
  pWAR Integer ,
  rWAR Integer ,
  Demand Integer ,
  Sign Text ,
  Accuracy Text ,
  Primary Key (ID)
)
;

.import --csv "D:/Documents/GitHub/Figment/Data/Draft Classes/1936/1936.csv" 1936


CREATE TABLE Career
(
  ID Integer ,
  Position Text ,
  'Number' Text ,
  'Name' Text ,
  Nickname Text ,
  Age Integer ,
  Nationality Text ,
  `City of Birth` Text ,
  Height Text ,
  `Weight` Integer ,
  Bats Text ,
  Throws Text ,
  School Text ,
  `Commit` Text ,
  Competition Text ,
  `Level` Text ,
  Pitches Integer ,
  Tendency Text ,
  Velocity Text ,
  Slot Text ,
  `Pitch Type` Text ,
  G Integer ,
  `GS (Bat)` Integer ,
  PA Integer ,
  AB Integer ,
  H Integer ,
  `2B` Integer ,
  `3B` Integer ,
  HR Integer ,
  RBI Integer ,
  R Integer ,
  Walks Integer ,
  SO Integer ,
  EBH Integer ,
  AVG Integer ,
  OBP Integer ,
  SLG Integer ,
  RC Integer ,
  `RC27` Integer ,
  ISO Integer ,
  wOBA Integer ,
  OPS Integer ,
  BABIP Integer ,
  WPA Integer ,
  WAR Integer ,
  PiPA Integer ,
  SB Integer ,
  CS Integer ,
  GP Integer ,
  GS Integer ,
  W Integer ,
  L Integer ,
  SV Integer ,
  BS Integer ,
  HLD Integer ,
  IP Integer ,
  HA Integer ,
  HRA Integer ,
  RA Integer ,
  ER Integer ,
  BB Integer ,
  K Integer ,
  ERA Integer ,
  `BABIP (Opponent)` Integer ,
  WHIP Integer ,
  `RA9` Integer ,
  `HR9` Integer ,
  `H9` Integer ,
  `BB9` Integer ,
  `K9` Integer ,
  KBB Integer ,
  QS Integer ,
  CG Integer ,
  SHO Integer ,
  `GO%` Integer ,
  FIP Integer ,
  `WPA (Pitcher)` Integer ,
  pWAR Integer ,
  rWAR Integer ,
  Demand Integer ,
  Sign Text ,
  Accuracy Text , 
  Primary Key (ID)
)
;

.import --csv "D:/Documents/GitHub/Figment/Data/Draft Classes/1936/Career.csv" Career


## First, we want to only look at the current season. Here are all pitchers who had an ERA below 3.00:

SELECT `Name`, ERA
FROM "1935"
WHERE ERA < 3.00
AND IP > 20
;

## Conversely, we could look only at 1934 or career by switching the FROM portion.

SELECT `Name`, ERA
FROM "1934"
WHERE ERA < 3.00
AND IP > 20
;

SELECT `Name`, ERA
FROM Career
WHERE ERA < 3.00
AND IP > 40
;

## So then, which 1935 eligible pitcher had the best ERA in his career? I think we can all guess who that might be:

SELECT `Name`, ERA
FROM Career
WHERE ERA < 1.50
AND IP > 40
ORDER BY ERA
;

## Of course, there is more to determining if a pitcher is good then just his ERA. You can filter by an ERA measure, but 
## that does not mean you just have to select ERA.

SELECT `Name`, `Level`, School, Competition, `Commit`, W, L, ERA, IP, R, ER, BB, K, WHIP
FROM Career
WHERE ERA < 1.50
AND IP > 40
ORDER BY ERA
;

## Now you have all the players you want to compare. Even better, you can export this as a CSV file:

.mode column 
.headers on 
.mode csv
.output D:/Documents/GitHub/Figment/Data/Pitchers.csv

SELECT `Name`, `Level`, School, Competition, `Commit`, W, L, ERA, IP, R, ER, BB, K, WHIP
FROM Career
WHERE ERA < 1.50
AND IP > 40
ORDER BY ERA
;

## And then, to return to the console:

.output stdout

## Enjoy the query finding! I plan on making updates, so make sure to check Github for updates. If you find any
## errors or would like to see other stats included, please let me know and I would be more then willing to help
## troubleshoot issues or add columns.

## I plan on saving all draft classes (I retroactively was able to get 1934 it is just missing a few metrics) so
## we can look back and compare current classes to past classes. I eventually hope to create another database for
## active players (and potentially all players), but for now I am just working on getting all the draft classes in
## and work out any kinks I find before adventuring too far out.
